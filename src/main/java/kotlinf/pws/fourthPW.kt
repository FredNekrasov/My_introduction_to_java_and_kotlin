package kotlinf.pws
/*Используя функции, реализующие работу с регулярными выражениями, разработайте программу проверки синтаксической корректности фрагмента программы на языке Pascal. For testing regular expressions https://regex101.com/
Проверка правильности последовательности операторов присваивания, правая часть которых – выражения, в которых используются литералы типа «множество» со значениями типа char, переменные и операции +,-,*.*/
fun main() {
    val rule = Regex("""(\s*([a-zA-Z_]\w*)\s*:=\s*([a-zA-Z_]\w*|\[((('[^']'|#\d+|'''')\.\.('[^']'|#\d+|'''')|('[^']'|#\d+|''''))(,\s*(('[^'"]'|#\d+|'''')\.\.('[^'"]'|#\d+|'''')|('[^']'|#\d+|'''')))*)])(\s*([*+-])\s*([a-zA-Z_]\w*|\[((('[^']'|#\d+|'''')\.\.('[^']'|#\d+|'''')|('[^']'|#\d+|''''))(,\s*(('[^']'|#\d+|'''')\.\.('[^']'|#\d+|'''')|('[^']'|#\d+|'''')))*)]))*\s*;)*""")
    //Проверка на переменные := проверка на переменные или множество (+ или - или *) проверка на переменные или множество;
    val code = """
        a1a2 := [' ', 'd', 'e'] + [' ', 'd', 'e']; _1 := ['''', '''', 'e'] - [''''];
        is_me := chs2_djs23 + ['k', 'n'];
        var1 := [' ', 'd', 'e'];
        var2 := [#32..'z'] + ['A'..'Z', '0'..'9'] - ['d', #32];
        var3 := var2sfd34 - var1;
        var4 := var1 - ['0'..'9'];
        var5 := ['O'..'9'] * ['a'..'z'];
        a1a2 := ['f', 'd', 'e'] - ['h', 'd', 'e'];
        _1 := ['''', ' ', 'e', #56] - ['''', #67, #89..#97, #45];
        var2 := [#32..'z', #45..#78] + ['A'..'Z', '0'..'9'] - ['d', #32];
        var3 := var2sfd34 + var1 * [''''];
        var5 := ['O'..'9'] * ['a'..'z', 'A', 'Z'];
    """.trimIndent()
    val lines = code.split("\n")
    for (line in lines) {
        if (rule.matches(line.trim())) println("The |${line}| is correct")
        else println("The |${line}| is incorrect")
    }
    rule.findAll(lines[2].trim()).forEach { println(it.value)/*it.groups.forEach { x -> println(x?.value) }*/ }
}